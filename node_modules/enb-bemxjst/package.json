{
  "author": {
    "name": "Andrew Abramov",
    "email": "andrewblond@yandex.com"
  },
  "description": "bem-xjst support for ENB",
  "name": "enb-bemxjst",
  "version": "1.3.5",
  "repository": {
    "type": "git",
    "url": "git://github.com/enb-bem/enb-bemxjst"
  },
  "homepage": "https://github.com/enb-bem/enb-bemxjst",
  "bugs": {
    "url": "https://github.com/enb-bem/enb-bemxjst/issues"
  },
  "licenses": [
    {
      "type": "MPL-2.0",
      "url": "https://github.com/enb-bem/enb-bemxjst/blob/master/LICENSE.txt"
    }
  ],
  "contributors": [
    {
      "name": "Andrew Abramov",
      "email": "andrewblond@yandex.com"
    },
    {
      "name": "Marat Dulin",
      "email": "mdevils@yandex.ru"
    }
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "peerDependencies": {
    "enb": ">= 0.13.0 < 1.0.0"
  },
  "dependencies": {
    "bem-xjst": "1.0.3",
    "bemhtml-compat": "0.1.2",
    "sibling": "0.1.3",
    "vow": "0.4.10"
  },
  "devDependencies": {
    "enb": ">= 0.13.0 < 1.0.0",
    "istanbul": "0.3.5",
    "jscs": "1.8.1",
    "jshint": "2.5.11",
    "mocha": "2.0.1",
    "mock-fs": "2.3.2",
    "mock-require": "1.0.5",
    "must": "0.12.0"
  },
  "scripts": {
    "test": "npm run lint && npm run cover",
    "lint": "jshint . && jscs -c .jscs.js .",
    "test-techs": "mocha test/techs",
    "cover": "istanbul cover _mocha -- test/techs"
  },
  "readme": "enb-bemxjst\n===========\n\n[![NPM version](http://img.shields.io/npm/v/enb-bemxjst.svg?style=flat)](http://badge.fury.io/js/enb-bemxjst) [![Build Status](http://img.shields.io/travis/enb-bem/enb-bemxjst/master.svg?style=flat)](https://travis-ci.org/enb-bem/enb-bemxjst) [![Coverage Status](https://img.shields.io/coveralls/enb-bem/enb-bemxjst.svg?style=flat)](https://coveralls.io/r/enb-bem/enb-bemxjst?branch=master) [![Dependency Status](http://img.shields.io/david/enb-bem/enb-bemxjst.svg?style=flat)](https://david-dm.org/enb-bem/enb-bemxjst)\n\nПоддержка технологий, базирующихся на основе [BEM-XJST](http://ru.bem.info/tools/templating-engines/bemxjst/), для [ENB](https://github.com/enb-make/enb.git).\nБазовые шаблоны для BEMHTML и BEMTREE находятся в библиотеке [bem-core](http://ru.bem.info/libs/bem-core/v2.3.0/).\n\n**Важно**: для технологий, базовые шаблоны которых находятся в библиотеке [bem-bl](http://ru.bem.info/libs/bem-bl/), следует использовать [enb-xjst](https://github.com/enb-bem/enb-xjst) пакет.\n\nУстановка\n---------\n```sh\n$ npm install --save-dev enb-bemxjst\n```\n\nДля работы модуля требуется зависимость от пакета `enb` версии `0.13.0` или выше.\n\nТехнологии\n----------\n\n* [bemhtml & bemhtml-old](#bemhtml--bemhtml-old)\n* [bemtree & bemtree-old](#bemtree--bemtree-old)\n* [html-from-bemjson](#html-from-bemjson)\n* [html-from-bemjson-i18n](#html-from-bemjson-i18n)\n\n### Зачем нужны `*-old`-технологии?\nТехнологии с суффиксом `old` помимо JS-синтаксиса поддерживают ещё и первоначальный синтаксис.\n\nТранслирование из первоначального в JS-синтаксис осуществляется с помощью [bemhtml-compat](https://github.com/bem/bemhtml-compat).\n\nИспользовать технологии с суффиксом `old` следует, когда действительно нужна поддержка первоначального синтаксиса, так как из-за транслирования сборка происходит медленнее, чем в аналогичных технологиях без суффикса.\nНапример, это может быть полезно при миграции c [bem-bl](https://github.com/bem/bem-bl.git) на [bem-core](https://github.com/bem/bem-core), чтобы не переписывать код всего проекта целиком, а поэтапно переходить на JS-синтаксис для каждого отдельного шаблона.\n\n**Важно:** считается, что файлы с расширением `*.xjst` могут быть написаны только в JS-синтаксисе. Транслирование для таких файлов проводиться не будет, даже если использовать `old`-технологии.\n\n### bemhtml & bemhtml-old\n\nСклеивает `bemhtml.xjst` и `bemhtml`-файлы по deps'ам, обрабатывает [BEM-XJST](http://ru.bem.info/tools/templating-engines/bemxjst/)-транслятором, сохраняет (по умолчанию) в виде `?.bemhtml.js`.\n\n**Опции**\n\n* *String* **target** — результирующий таргет. По умолчанию — `?.bemhtml.js`.\n* *String* **filesTarget** — files-таргет, на основе которого создаётся список исходных файлов (его предоставляет технология `files`). По умолчанию — `?.files`.\n* *String* **sourceSuffixes** — суффиксы файлов, по которым строится `files`-таргет. По умолчанию — `['bemhtml', 'bemhtml.xjst']`.\n* *String* **exportName** — имя переменной-обработчика BEMHTML. По умолчанию — `'BEMHTML'`.\n* *Boolean* **devMode** — development-режим. По умолчанию — `true`.\n* *Boolean* **cache** — кэширование. Возможно только в production-режиме. По умолчанию — `false`.\n* *Object* **modulesDeps** — хэш-объект, прокидывающий в генерируемую для скомпилированных шаблонов обвязку необходимые YModules-модули.\n\n**Пример**\n\n```javascript\nnodeConfig.addTech([ require('enb-bemxjst/techs/bemhtml'), { devMode: false } ]);\n```\n\n### bemtree & bemtree-old\n\nСклеивает BEMTREE-файлы по deps'ам, обрабатывает [BEM-XJST](http://ru.bem.info/tools/templating-engines/bemxjst/)-транслятором, сохраняет (по умолчанию) в виде `?.bemtree.js`.\n\n**Опции**\n\n* *String* **target** — результирующий таргет. По умолчанию — `?.bemtree.js`.\n* *String* **filesTarget** — files-таргет, на основе которого создаётся список исходных файлов (его предоставляет технология `files`). По умолчанию — `?.files`.\n* *String* **sourceSuffixes** — суффиксы файлов, по которым строится `files`-таргет. По умолчанию — `['bemtree']`.\n* *String* **exportName** — имя переменной-обработчика BEMTREE. По умолчанию — `'BEMTREE'`.\n* *Boolean* **devMode** — development-режим. По умолчанию — `true`.\n* *Object* **modulesDeps** — хэш-объект, прокидывающий в генерируемую для скомпилированных шаблонов обвязку необходимые YModules-модули.\n\n**Пример**\n\n```javascript\nnodeConfig.addTech([ require('enb-bemxjst/techs/bemtree'), { devMode: false } ]);\n```\n\n### html-from-bemjson\n\nСобирает HTML-файл с помощью BEMJSON и BEMHTML.\n\n**Опции**\n\n* *String* **bemhtmlFile** — исходный BEMHTML-файл. По умолчанию — `?.bemhtml.js`.\n* *String* **bemjsonFile** — исходный BEMJSON-файл. По умолчанию — `?.bemjson.js`.\n* *String* **target** — результирующий HTML-файл. По умолчанию — `?.html`.\n\n**Пример**\n\n```javascript\nnodeConfig.addTech(require('enb-bemxjst/techs/html-from-bemjson'));\n```\n\n### html-from-bemjson-i18n\n\nСобирает HTML-файл с помощью BEMJSON, BEMHTML, `lang.all` и `lang.{lang}`.\n\n**Опции**\n\n* *String* **bemhtmlFile** — исходный BEMHTML-файл. По умолчанию — `?.bemhtml.js`.\n* *String* **bemjsonFile** — исходный BEMJSON-файл. По умолчанию — `?.bemjson.js`.\n* *String* **langAllFile** — исходный langAll-файл. По умолчанию — `?.lang.all.js`.\n* *String* **langFile** — исходный lang-файл. По умолчанию — `?.lang.{lang}.js`. Если параметр lang не указан, берётся первый из объявленных в проекте языков.\n* *String* **target** — результирующий HTML-файл. По умолчанию — `?.{lang}.html`.\n\n**Пример**\n\n```javascript\nnodeConfig.addTech(require('enb-bemxjst/techs/html-from-bemjson-i18n'));\n```\nЛицензия\n--------\n\n© 2013 YANDEX LLC. Код лицензирован [Mozilla Public License 2.0](LICENSE.txt).\n",
  "readmeFilename": "README.md",
  "_id": "enb-bemxjst@1.3.5",
  "_from": "enb-bemxjst@^1.3.4"
}
