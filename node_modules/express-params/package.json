{
  "name": "express-params",
  "version": "0.0.3",
  "description": "Express param functions",
  "keywords": [
    "express"
  ],
  "author": {
    "name": "TJ Holowaychuk",
    "email": "tj@vision-media.ca"
  },
  "dependencies": {},
  "devDependencies": {
    "express": "2.5.x",
    "should": "0.3.x",
    "expresso": "0.9.x"
  },
  "main": "index",
  "readme": "\n# express-params\n\n  Express param pre-condition functions.\n\n## Installation\n\n Works with Express 2.5.x\n\n    $ npm install express-params\n\n## Usage\n\n Simply invoke the `extend()` method on an express `HTTPServer` to add this functionality.\n\n```javascript\nvar express = require('express')\n  , params = require('express-params')\n  , app = express.createServer();\n\nparams.extend(app);\n```\n\n## RegExp\n\n  Regular expressions can be used to extract data from pathname\n  segments as shown below. When matched `req.params.range` contains\n  the capture groups of the `regexp.exec()` call.\n\n```javascript\napp.param('range', /^(\\w+)\\.\\.(\\w+)?$/);\n\napp.get('/range/:range', function(req, res, next){\n  var range = req.params.range;\n  res.send('from ' + range[1] + ' to ' + range[2]);\n});\n```\n\n  Another use-case for regular expression parameters is to validate input,\n  for example here we may want to route via numeric id, followed by a route\n  which will accept other values.\n\n```javascript\napp.param('uid', /^[0-9]+$/);\n\napp.get('/user/:uid', function(req, res, next){\n  var uid = req.params.uid;\n  res.send('user ' + uid);\n});\n\napp.get('/user/:name', function(req, res, next){\n  var name = req.params.name;\n  res.send('user ' + name);\n});\n```\n\n## Return Value\n\n  Functions with arity < 3 (less than three parameters) are not\n  considered to be middleware-style, and are useful for type coercion.\n  For example below we pass `Number`, a function which accepts a string coercing to a number, alternatively we could use `parseInt` here. The result of `req.params.id` will then be a number, however if we were to issue `GET /user/tj` the result would be `NaN`, which is considered invalid by `exports.invalidParamReturnValue(val)` so `next('route')` is called, ignoring the route.\n\n```javascript\napp.param('id', Number);\n\napp.get('/user/:id', function(req, res, next){\n  var id = req.params.id;\n  res.send('typeof ' + typeof id + ' ' + id);\n});\n```\n\n  The following default logic is applied to test if a return value is invalid:\n\n```javascript  \nreturn null == val\n  || false === val\n  || ('number' == typeof val && isNaN(val));\n```\n\n It's safe to throw in these functions, as connect's router wraps them in a try/catch block, and they are not asynchronous.\n\n## Running Tests\n\n First install dependencies:\n \n     $ npm install -g\n\n Then run the tests:\n \n     $ make test\n\n## License \n\n(The MIT License)\n\nCopyright (c) 2011 TJ Holowaychuk &lt;tj@vision-media.ca&gt;\n\nPermission is hereby granted, free of charge, to any person obtaining\na copy of this software and associated documentation files (the\n'Software'), to deal in the Software without restriction, including\nwithout limitation the rights to use, copy, modify, merge, publish,\ndistribute, sublicense, and/or sell copies of the Software, and to\npermit persons to whom the Software is furnished to do so, subject to\nthe following conditions:\n\nThe above copyright notice and this permission notice shall be\nincluded in all copies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED 'AS IS', WITHOUT WARRANTY OF ANY KIND,\nEXPRESS OR IMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF\nMERCHANTABILITY, FITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT.\nIN NO EVENT SHALL THE AUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY\nCLAIM, DAMAGES OR OTHER LIABILITY, WHETHER IN AN ACTION OF CONTRACT,\nTORT OR OTHERWISE, ARISING FROM, OUT OF OR IN CONNECTION WITH THE\nSOFTWARE OR THE USE OR OTHER DEALINGS IN THE SOFTWARE.",
  "readmeFilename": "Readme.md",
  "_id": "express-params@0.0.3",
  "_from": "express-params@*"
}
