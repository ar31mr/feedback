{
  "name": "bem-naming",
  "version": "0.5.1",
  "description": "Manage naming of BEM entities",
  "keywords": [
    "bem",
    "naming",
    "entities",
    "parse",
    "stringify"
  ],
  "author": {
    "name": "Andrew Abramov",
    "email": "andrewblond@yandex.com"
  },
  "licenses": [
    {
      "type": "MPL-2.0",
      "url": "https://github.com/bem/bem-naming/blob/master/LICENSE.txt"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git://github.com/bem/bem-naming"
  },
  "homepage": "https://github.com/bem/bem-naming",
  "bugs": {
    "url": "https://github.com/bem/bem-naming/issues"
  },
  "maintainers": [
    {
      "name": "Andrew Abramov",
      "email": "andrewblond@yandex.com"
    }
  ],
  "contributors": [
    {
      "name": "Andrew Abramov",
      "email": "andrewblond@yandex.com"
    }
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "main": "lib/bem-naming",
  "files": [
    "lib/bem-naming.js",
    "LICENSE.txt"
  ],
  "devDependencies": {
    "istanbul": "0.3.5",
    "jscs": "1.9.0",
    "jshint": "2.5.11",
    "matcha": "0.6.0",
    "mocha": "2.1.0",
    "should": "4.5.0",
    "uglify-js": "2.4.16",
    "zuul": "1.16.4"
  },
  "scripts": {
    "test": "npm run lint && npm run unit && npm run browser",
    "lint": "jshint . && jscs -c .jscs.js .",
    "unit": "mocha ./test/**/*.test.js",
    "browser": "zuul -- ./test/**/*.test.js",
    "cover": "istanbul cover _mocha -- ./test/**/*.test.js",
    "bench": "matcha benchmark/*.js",
    "min": "uglifyjs lib/bem-naming.js > bem-naming.min.js",
    "coveralls": "npm i coveralls && npm run cover && cat ./coverage/lcov.info | coveralls",
    "travis": "npm run test && npm run coveralls"
  },
  "readme": "bem-naming\n==========\n\n[![NPM version](http://img.shields.io/npm/v/bem-naming.svg?style=flat)](http://www.npmjs.org/package/bem-naming) [![Download](http://img.shields.io/badge/download-1%20kB-blue.svg?style=flat)](https://github.com/bem/bem-naming/releases/v0.5.1) [![Build Status](http://img.shields.io/travis/bem/bem-naming/master.svg?style=flat)](https://travis-ci.org/bem/bem-naming) [![Coverage Status](https://img.shields.io/coveralls/bem/bem-naming.svg?branch=master&style=flat)](https://coveralls.io/r/bem/bem-naming) [![devDependency Status](http://img.shields.io/david/dev/bem/bem-naming.svg?style=flat)](https://david-dm.org/bem/bem-naming#info=devDependencies)\n\nAbout\n-----\n\nThis tool allows getting information about BEM entity using [string](#string-representation) as well as forming string representation based on [BEM-naming](#bem-naming).\n\nString representation\n---------------------\nTo define BEM entities we often use a special string format that allows us 100% define what entity exactly is represented.\n\nAccording to original BEM-naming convention it looks like the following:\n\n```js\n'block[_block-mod-name[_block-mod-val]][__elem-name[_elem-mod-name[_elem-mod-val]]]'\n```\n\n*(Parameters whithin square brackets are optional)*\n\n* Block — `block-name`.\n* Block's modifier in key-value format — `block-name_mod-name_mod-val`.\n* Block's boolean modifier — `block-name_mod`.\n* Block's element — `block-name__elem-name`.\n* Element's modifier in key-value format — `block-name__elem-name_mod-name_mod-val`.\n* Element's boolean modifier — `block-name__elem_mod`.\n\nCommon misconceptions\n---------------------\n\nBEM methodology involves the use of flat structure inside a block. It means that BEM entity can not be represented as an element of the other element and the following string representation will be invalid:\n\n```js\n'block__some-elem__sub-elem'\n```\n\nAlso there is no such BEM entity as a modifier and an element modifier simultaneously so the following string representation will be invalid:\n\n```js\n'block_block-mod-name_block-mod-val__elem-name_elem-mod-name_elem-mod-val'\n```\n\nBEM-naming\n----------\n\nBEM entities can be defined with a help of js-object with the following fields:\n\n* `block` — a block name. The field is required because only a block exists as an independent BEM entity\n* `elem` — an element name.\n* `modName` — a modifier name.\n* `modVal` — a modifier value.\n\nThe modifier consists of a pair of fields `modName` and `modVal`. This means that the field `modVal` without `modName` has no meaning.\n\nExample:\n\n```js\n// The block modifier\n{\n    block: 'block',\n    modName: 'mod',\n    modVal: 'val'\n}\n\n// Not valid BEM-notation\n{\n    block: 'block',\n    modVal: 'val'\n}\n```\n\nTo describe the boolean modifier field `modVal` must be specified as `true`.\n\nExample:\n\n```js\n// Boolean modifier of a block\n{\n    block: 'block',\n    modName: 'mod',\n    modVal: true\n}\n\n// Shorthand for the boolean modifier of a block\n{\n    block: 'block',\n    modName: 'mod'\n}\n\n// Not valid BEM-notation\n{\n    block: 'block',\n    modName: 'mod',\n    modVal: false\n}\n```\n\nAPI\n---\n\n* [`validate(str)`](#validatestr)\n* [`parse(str)`](#parsestr)\n* [`stringify(obj)`](#stringifyobj)\n* [`typeOf(str)`](#typeofstr)\n* [`typeOf(obj)`](#typeofobj)\n* [`isBlock(str)`](#isblockstr)\n* [`isBlock(obj)`](#isblockobj)\n* [`isBlockMod(str)`](#isblockmodstr)\n* [`isBlockMod(obj)`](#isblockmodobj)\n* [`isElem(str)`](#iselemstr)\n* [`isElem(obj)`](#iselemobj)\n* [`isElemMod(str)`](#iselemmodstr)\n* [`isElemMod(obj)`](#iselemmodobj)\n* [`elemDelim`](#elemdelim)\n* [`modDelim`](#moddelim)\n\n### `validate(str)`\n\nChecks a string to be valid BEM notation.\n\nExample:\n\n```js\nbemNaming.validate('block-name');  // true\nbemNaming.validate('^*^');         // false\n```\n\n-------------------------------------------------------------------------------\n\n### `parse(str)`\n\nIt parses string `str` into BEM-naming.\n\nExample:\n\n```js\nbemNaming.parse('block__elem_mod_val');  // { block: 'block', elem: 'elem',\n                                         //   modName: 'mod', modVal: 'val' }\n```\n\n-------------------------------------------------------------------------------\n\n### `stringify(obj)`\n\nIt forms a string according to BEM-naming `obj`.\n\nExample:\n\n```js\nbemNaming.stringify({\n    block: 'block', elem: 'elem',\n    modName: 'mod', modVal: 'val'\n}); // 'block__elem_mod_val'\n```\n\n-------------------------------------------------------------------------------\n\n### `typeOf(str)`\n\nReturns a string indicating the type of the BEM entity.\n\nExample:\n\n```js\nbemNaming.typeOf('block');             // block\nbemNaming.typeOf('block_mod');         // blockMod\nbemNaming.typeOf('block__elem');       // elem\nbemNaming.typeOf('block__elem_mod');   // elemMod\n```\n\n-------------------------------------------------------------------------------\n\n### `typeOf(obj)`\n\nReturns a string indicating the type of the BEM entity.\n\nExample:\n\n```js\nbemNaming.isBlock({ block: 'block' });                 // block\nbemNaming.isBlock({ block: 'block', modName: 'mod' }); // blockMod\nbemNaming.isBlock({ block: 'block', elem: 'elem' });   // elem\nbemNaming.isBlock({ block: 'block', elem: 'elem' });   // elemMod\n```\n\n-------------------------------------------------------------------------------\n\n### `isBlock(str)`\n\nChecks whether string `str` is a block.\n\nExample:\n\n```js\nbemNaming.isBlock('block-name');   // true\nbemNaming.isBlock('block__elem');  // false\n```\n\n-------------------------------------------------------------------------------\n\n### `isBlock(obj)`\n\nChecks whether BEM-naming `obj` is a block.\n\nExample:\n\n```js\nbemNaming.isBlock({ block: 'block-name' });           // true\nbemNaming.isBlock({ block: 'block', elem: 'elem' });  // false\n```\n\n-------------------------------------------------------------------------------\n\n### `isBlockMod(str)`\n\nChecks whether string `str` is modifier of a block.\n\nExample:\n\n```js\nbemNaming.isBlockMod('block_mod');        // true\nbemNaming.isBlockMod('block__elem_mod');  // false\n```\n\n-------------------------------------------------------------------------------\n\n### `isBlockMod(obj)`\n\nChecks whether BEM-naming `obj` is modifier of a block.\n\nExample:\n\n```js\nbemNaming.isBlockMod({ block: 'block',\n    modName: 'mod', modVal: true });  // true\n\nbemNaming.isBlockMod({ block: 'block', elem: 'elem',\n    modName: 'mod', modVal: true });  // false\n```\n\n-------------------------------------------------------------------------------\n\n### `isElem(str)`\n\nChecks whether string `str` is element of a block.\n\nExample:\n\n```js\nbemNaming.isElem('block__elem');  // true\nbemNaming.isElem('block-name');   // false\n```\n\n-------------------------------------------------------------------------------\n\n### `isElem(obj)`\n\nChecks whether BEM-naming `obj` is element of a block.\n\nExample:\n\n```js\nbemNaming.isElem({ block: 'block', elem: 'elem' });  // true\nbemNaming.isElem({ block: 'block-name' });           // false\n```\n\n-------------------------------------------------------------------------------\n\n### `isElemMod(str)`\n\nChecks whether string `str` is modifier of an element.\n\nExample:\n\n```js\nbemNaming.isElemMod('block__elem_mod');  // true\nbemNaming.isElemMod('block__elem');      // false\n```\n\n-------------------------------------------------------------------------------\n\n### `isElemMod(obj)`\n\nChecks whether BEM-naming `obj` is modifier of an element.\n\nExample:\n\n```js\nbemNaming.isElemMod({ block: 'block', elem: 'elem',\n    modName: 'mod', modVal: true });  // true\n\nbemNaming.isElemMod({ block: 'block',\n    modName: 'mod', modVal: true});   // false\n```\n\n-------------------------------------------------------------------------------\n\n### `elemDelim`\n\nString to separate elem from block.\n\n-------------------------------------------------------------------------------\n\n### `modDelim`\n\nString to separate names and values of modifiers from blocks and elements.\n\nCustom naming convention\n------------------------\n\nUse `bemNaming` function to create instance to manage naming of your own naming convention.\n\nFunction `bemNaming` gets the object from the following options:\n\n* **String** `elem` — separates element's name from block. Default&nbsp;as&nbsp;`__`.\n* **String** `mod` — separates names and values of modifiers from blocks and elements. Default&nbsp;as&nbsp;`_`.\n* **String** `wordPattern` — defines which symbols can be used for block, element and modifier's names. Default&nbsp;as&nbsp;`[a-z0-9]+(?:-[a-z0-9]+)*`.\n\nExample:\n\n```js\nvar myNaming = bemNaming({\n    elem: '-',\n    mod: '--',\n    wordPattern: '[a-zA-Z0-9]+'   // because element and modifier's separators include\n});                               // hyphen in it, we need to exclude it from block,\n                                  // element and modifier's name\n\nmyNaming.parse('block--mod');     // { block: 'block',\n                                  //   modName: 'mod', modVal: true }\n\nmyNaming.stringify({              // 'blockName-elemName--boolElemMod'\n    block: 'blockName',\n    elem: 'elemName',\n    modName: 'boolElemMod'\n});\n```\n\nConvention by Harry Roberts\n---------------------------\n\nAccording to this convention elements are delimited with two underscores (__), and boolean modifiers are delimited by two hyphens (--).\nKey-value modifiers are not used.\n\nRead more in the [Guidelines](http://cssguidelin.es/#bem-like-naming).\n\nExample:\n\n```js\nvar csswizardry = bemNaming({\n    elem: '__',\n    mod: '--'\n});\n\ncsswizardry.parse('block__elem'); // { block: 'block', elem: 'elem' }\ncsswizardry.parse('block--mod');  // { block: 'block',\n                                  //   modName: 'mod', modVal: true }\n\ncsswizardry.stringify({           // 'block__elem--mod'\n    block: 'block',\n    elem: 'elem',\n    modName: 'mod'\n});\n```\n\nLicense\n-------\n\nCode and documentation copyright 2014 YANDEX LLC. Code released under the [Mozilla Public License 2.0](LICENSE.txt).\n",
  "readmeFilename": "README.md",
  "_id": "bem-naming@0.5.1",
  "_from": "bem-naming@0.5.1"
}
