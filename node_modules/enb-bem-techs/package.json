{
  "name": "enb-bem-techs",
  "version": "1.0.4",
  "description": "BEM methodology for ENB",
  "keywords": [
    "enb",
    "bem",
    "techs",
    "levels",
    "bemjson",
    "bemdecl",
    "deps",
    "files"
  ],
  "author": {
    "name": "Andrew Abramov",
    "email": "andrewblond@yandex.com"
  },
  "licenses": [
    {
      "type": "MPL-2.0",
      "url": "https://github.com/enb-bem/enb-bem-techs/blob/master/LICENSE.txt"
    }
  ],
  "repository": {
    "type": "git",
    "url": "git@github.com:enb-bem/enb-bem-techs.git"
  },
  "homepage": "https://github.com/enb-bem/enb-bem-techs",
  "bugs": {
    "url": "https://github.com/enb-bem/enb-bem-techs/issues"
  },
  "maintainers": [
    {
      "name": "Andrew Abramov",
      "email": "andrewblond@yandex.com"
    }
  ],
  "contributors": [
    {
      "name": "Andrew Abramov",
      "email": "andrewblond@yandex.com"
    },
    {
      "name": "Marat Dulin",
      "email": "mdevils@yandex.ru"
    }
  ],
  "engines": {
    "node": ">= 0.10.0"
  },
  "peerDependencies": {
    "enb": ">=0.13.0 <1.0.0"
  },
  "dependencies": {
    "bem-naming": "0.5.1",
    "inherit": "2.2.2",
    "js-yaml": "3.2.7",
    "vow": "0.4.8"
  },
  "devDependencies": {
    "enb": ">=0.13.0 <1.0.0",
    "istanbul": "0.3.6",
    "jscs": "1.11.3",
    "jshint": "2.6.0",
    "matcha": "0.6.0",
    "mocha": "2.1.0",
    "mock-fs": "2.5.0",
    "must": "0.12.0"
  },
  "main": "index.js",
  "files": [
    "lib/**",
    "exlib/**",
    "techs/**",
    "index.js",
    "LICENSE.txt"
  ],
  "scripts": {
    "test": "npm run lint && npm run unit",
    "lint": "jshint . && jscs -c .jscs.js .",
    "unit": "mocha test/**/*.test.js",
    "bench": "npm run bench-deps && matcha benchmark/*.js",
    "bench-deps": "cd benchmark/fixtures && bower i",
    "cover": "istanbul cover _mocha -- test/**/*.test.js",
    "coveralls": "npm i coveralls && npm run cover && cat ./coverage/lcov.info | coveralls",
    "travis": "npm run test && npm run coveralls"
  },
  "readme": "enb-bem-techs\n=============\n\n[![NPM version](http://img.shields.io/npm/v/enb-bem-techs.svg?style=flat)](http://www.npmjs.org/package/enb-bem-techs) [![Build Status](http://img.shields.io/travis/enb-bem/enb-bem-techs/master.svg?style=flat&label=tests)](https://travis-ci.org/enb-bem/enb-bem-techs) [![Build status](http://img.shields.io/appveyor/ci/andrewblond/enb-bem-techs.svg?style=flat&label=windows)](https://ci.appveyor.com/project/andrewblond/enb-bem-techs) [![Coverage Status](https://img.shields.io/coveralls/enb-bem/enb-bem-techs.svg?style=flat)](https://coveralls.io/r/enb-bem/enb-bem-techs?branch=master) [![Dependency Status](http://img.shields.io/david/enb-bem/enb-bem-techs.svg?style=flat)](https://david-dm.org/enb-bem/enb-bem-techs)\n\nПакет предоставляет набор базовых [ENB](http://enb-make.info/)-технологий для сборки проектов, в основе которых лежит [БЭМ-методология](http://ru.bem.info/method/).\n\nОсновная задача базовых технологий — подготовить промежуточный результат для технологий, которые ничего не знают о методологии и о том, как устроен проект.\n\nБольшинство технологий в [ENB](http://enb-make.info/) ожидает на вход список файлов или директорий, а также информацию о требуемом порядке для их сборки.\n\nУстановка\n---------\n\n```sh\n$ npm install --save-dev enb-bem-techs\n```\n\nДля работы модуля требуется зависимость от пакета `enb` версии `0.13.0` или выше.\n\nДокументация\n------------\n\n* [Как устроены БЭМ-проекты](docs/bem-project.md)\n* [Сборка бандла](docs/build-bundle.md)\n* [Сборка страницы](docs/build-page.md)\n* [Сборка merged-бандла](docs/build-merged-bundle.md)\n* [Сборка дистрибутива](docs/build-dist.md)\n\nС чего начать?\n--------------\n\nВоспользуйтесь [инструкцией по установке project-stub](http://ru.bem.info/tutorials/project-stub/), чтобы создать БЭМ-проект, настроенный для сборки с помощью [ENB](http://enb-make.info/).\n\nДля создания проекта, подходящего под ваши задачи, ответьте на вопросы [генератора БЭМ-проектов](http://ru.bem.info/tools/bem/bem-stub/), основанного на [Yeoman](http://yeoman.io/).\n\nПакеты\n------\n\n### Стили\n\n* [enb-stylus](https://github.com/enb-make/enb-stylus) — сборка `stylus`-файлов.\n* [enb-autoprefixer](https://github.com/enb-make/enb-autoprefixer) — поддержка `autoprefixer`.\n\n### Шаблонизация\n\n* [enb-bh](https://github.com/enb-bem/enb-bh) — сборка BH-шаблонов.\n* [enb-xjst](https://github.com/enb-bem/enb-xjst) — сборка BEMHTML и BEMTREE на основе `xjst`.\n* [enb-bemxjst](https://github.com/enb-bem/enb-bemxjst) — сборка BEMHTML и BEMTREE на основе `bem-xjst`.\n\n### Инфраструктура\n\n* [enb-bem-examples](https://github.com/enb-bem/enb-bem-examples) — сборка БЭМ-примеров.\n* [enb-bem-docs](https://github.com/enb-bem/enb-bem-docs) — сборка БЭМ-документации.\n* [enb-bem-specs](https://github.com/enb-bem/enb-bem-specs) — сборка и запуск тестов для клиентского JavaScript.\n* [enb-bem-tmpl-specs](https://github.com/enb-bem/enb-bem-tmpl-specs) — сборка и запуск тестов для БЭМ-шаблонов.\n* [enb-magic-platform](https://github.com/enb-bem/enb-magic-platform) — платформа и dev-сервер для сборки БЭМ-проектов.\n\n### Остальное\n\n* [enb-borschik](https://github.com/enb-make/enb-borschik) — поддержка `borschik`.\n* [enb-modules](https://github.com/enb-make/enb-modules) — поддержка `ym`.\n* [enb-diverse-js](https://github.com/enb-make/enb-diverse-js) — поддержка паттерна `vanilla.js` + `node.js` + `browser.js`.\n* [enb-bem-i18n](https://github.com/enb-bem/enb-bem-i18n) — поддержка `BEM.I18N`.\n\nТехнологии\n----------\n\n* [levels](#levels)\n* [levelsToBemdecl](#levelstobemdecl)\n* [bemjsonToBemdecl](#bemjsontobemdecl)\n* [deps](#deps)\n* [depsOld](#depsold)\n* [depsByTechToBemdecl](#depsbytechtobemdecl)\n* [files](#files)\n* [provideBemdecl](#providebemdecl)\n* [provideDeps](#providedeps)\n* [mergeBemdecl](#mergebemdecl)\n* [mergeDeps](#mergedeps)\n* [subtractDeps](#subtractdeps)\n\n### `levels`\n\nСобирает информацию об уровнях переопределения проекта. Результат выполнения этой технологии необходим следующим технологиям:\n\n* `levelsToBemdecl`\n* `deps`\n* `depsOld`\n* `files`\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.levels`.\n\nРезультирующий таргет.\n\n##### levels\n\nТип: `String[] | Object[]`.\n\nСписок путей до уровней переопределения.\n\nКаждый путь может быть задан абсолютным или относительно корня проекта.\n\nВместо строки может использоваться объект вида `{ path: 'path/to/level', check: false }`.\nПоле `path` является обязательным, а поле `check` по умолчанию равно `true`.\n\nЗначение `check: false` используется для того, чтобы закэшировать содержимое уровня.\n\nЕсли указать `check: true` уровень будет сканироваться заново каждый раз при сборке, вне зависимости от наличия кэша.\n\n#### Пример\n\n```js\nvar techs = require('enb-bem-techs');\n\nnodeConfig.addTech([techs.levels, { levels: [\n    // На проекте не нужно менять код внешних библиотек,\n    // достаточно один раз просканировать их уровни и использовать кэш.\n    { path: 'libs/bem-core/common.blocks', check: false },\n    { path: 'libs/bem-core/desktop.blocks', check: false },\n\n    // Уровни проекта нужно сканировать перед каждой сборкой.\n    { path: 'desktop.blocks', check: true },\n] }]);\n```\n\n-------------------------------------------------------------------------------\n\n### `levelsToBemdecl`\n\nФормирует BEMDECL-файл, состоящий из всех БЭМ-сущностей, найденных в указанных уровнях.\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.bemdecl.js`.\n\nРезультирующий BEMDECL-файл.\n\n##### source\n\nТип: `String`. По умолчанию: `?.levels`.\n\nТаргет с интроспекцией уровней (результат сканирования `levels` технологией).\n\n#### Пример\n\n```js\nvar techs = require('enb-bem-techs');\n\nnodeConfig.addTechs([\n    // Сканируем уровни проекта.\n    // Результат записываем в `?.levels`,\n    // т.к. опция `target` по умолчанию — `?.levels`.\n    [techs.levels, { levels: ['blocks'] }],\n\n    // Строим BEMDECL-файл по результатам сканирования уровней.\n    // Интроспекцию берём из `?.levels`,\n    // т.к. опция `source` по умолчанию — `?.levels`.\n    [techs.levelsToBemdecl]\n]);\n```\n\n-------------------------------------------------------------------------------\n\n### `bemjsonToBemdecl`\n\nФормирует BEMDECL-файл из BEMJSON-файла.\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.bemdecl.js`.\n\nРезультирующий BEMDECL-файл.\n\n##### source\n\nТип: `String`. По умолчанию: `?.bemjson.js`.\n\nИсходный BEMJSON-файл.\n\n#### Пример\n\n```js\nvar techs = require('enb-bem-techs'),\n    provide = require('enb/techs/file-provider');\n\nnodeConfig.addTechs([\n    // Предоставляет BEMJSON-файл, написанный вручную, для ENB.\n    // В опции `target` путь до BEMJSON-файла.\n    [provide, { target: '?.bemjson.js' }],\n\n    // Строим BEMDECL-файл по полученному BEMJSON-файлу.\n    // BEMJSON-файл берём из `?.bemjson.js`,\n    // т.к. опция `source` по умолчанию — `?.bemjson.js`.\n    [techs.bemjsonToBemdecl]\n]);\n```\n-------------------------------------------------------------------------------\n\n### `deps`\n\nДополняет декларацию БЭМ-сущностей на основе информации из технологий зависимостей (`deps.js` или `deps.yaml`) БЭМ-сущностей.\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.deps.js`.\n\nРезультирующий DEPS-файл.\n\n##### bemdeclFile\n\nТип: `String`. По умолчанию: `?.bemdecl.js`.\n\nФайл с декларацией БЭМ-сущностей.\n\n##### levelsTarget\n\nТип: `String`. По умолчанию: `?.levels`.\n\nТаргет с интроспекцией уровней (результат сканирования `levels` технологией).\n\n#### Пример\n\nРаскрытие зависимостей по BEMDECL-файлу.\n\n```js\nvar techs = require('enb-bem-techs');\n\nnodeConfig.addTech([techs.deps, {\n    bemdeclFile: '?.bemdecl.js',\n    target: '?.deps.js'\n}]);\n```\n\nРаскрытие зависимостей по DEPS-файлу.\n\n```js\nvar techs = require('enb-bem-techs');\n\nnodeConfig.addTech([techs.deps, {\n    bemdeclFile: 'source-decl.deps.js',\n    target: '?.deps.js'\n}]);\n```\n\n-------------------------------------------------------------------------------\n\n### `depsOld`\n\nДополняет декларацию БЭМ-сущностей на основе информации из технологий зависимостей (`deps.js`) БЭМ-сущностей.\n\nИспользует алгоритм, заимствованный из [bem-tools](http://ru.bem.info/tools/bem/bem-tools/).\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.deps.js`.\n\nРезультирующий DEPS-файл.\n\n##### bemdeclFile\n\nТип: `String`. По умолчанию: `?.bemdecl.js`.\n\nФайл с декларацией БЭМ-сущностей.\n\n##### levelsTarget\n\nТип: `String`. По умолчанию: `?.levels`.\n\nТаргет с интроспекцией уровней (результат сканирования `levels` технологией).\n\n#### Пример\n\nРаскрытие зависимостей по BEMDECL-файлу.\n\n```js\nvar techs = require('enb-bem-techs');\n\nnodeConfig.addTech([techs.depsOld, {\n    bemdeclFile: '?.bemdecl.js',\n    target: '?.deps.js'\n}]);\n```\n\nРаскрытие зависимостей по DEPS-файлу.\n\n```js\nvar techs = require('enb-bem-techs');\n\nnodeConfig.addTech([techs.depsOld, {\n    bemdeclFile: 'source-decl.deps.js',\n    target: '?.deps.js'\n}]);\n```\n\n-------------------------------------------------------------------------------\n\n### `depsByTechToBemdecl`\n\nФормирует BEMDECL-файл на основе зависимостей по технологиям (depsByTech). Такие зависимости описываются в `deps.js` технологиях БЭМ-сущностей.\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.bemdecl.js`.\n\nРезультирующий BEMDECL-файл.\n\n##### sourceTech\n\nТип: `String`. Обязательная опция.\n\nИмя технологии для которой собираются зависимости.\n\n##### destTech\n\nТип: `String`.\n\nИмя технологии от которой зависит `sourceTech`.\n\n##### filesTarget\n\nТип: `String`. По умолчанию: `?.files`.\n\nТаргет со списоком `deps.js`-файлов (результат технологии `files`).\n\n##### sourceSuffixes\n\nТип: `String[]`. По умолчанию: `['deps.js']`.\n\nСуффиксы файлов с описанием зависимостей БЭМ-сущностей.\n\n#### Пример\n\nЧастый случай, когда БЭМ-сущность в технологии клиенского JavaScript использует свою же технологию шаблонов.\n\n`button.deps.js`\n\n```js\n{\n    block: 'button'\n    tech: 'js'          // sourceTech\n    shouldDeps: {\n        tech: 'bemhtml' // destTech\n    }\n}\n```\n\nВ большинстве случаев схема построения BEMDECL-файла по `depsByTech` выглядит так:\n\n```\n(BEMJSON ->) BEMDECL (1) -> deps (2) -> files (3) -> BEMDECL (4)\n```\n\n1. Получаем BEMDECL-файл (?.bemdecl.js).\n2. Дополняем декларацию БЭМ-сущностей из BEMDECL-файла и записываем результат в DEPS-файл (?.deps.js).\n3. Получаем упорядоченный список `deps.js` файлов (?.files.js).\n4. Получаем BEMDECL-файл на основе зависимостей по технологиям (?.tech.bemdecl.js).\n\n```js\nvar techs = require('enb-bem-techs'),\n    provide = require('enb/techs/file-provider');\n\nnodeConfig.addTechs([\n    [techs.levels, { levels: ['blocks'] }],\n    [provide, { target: '?.bemdecl.js' }], // (1) `?.bemdecl.js`\n    [techs.deps],                          // (2) `?.deps.js`\n    [techs.files],                         // (3) `?.files.js`\n    // Далее '?.bemhtml.bemdecl.js' можно использовать для сборки шаблонов,\n    // которые используются в клиенском JavaScript.\n    // Список `deps.js` файлов берём из `?.files`, т.к. опция filesTarget\n    // по умолчанию — `?.files`.\n    [techs.depsByTechToBemdecl, {          // (4) `?.bemhtml.bemdecl.js`\n        target: '?.bemhtml.bemdecl.js',\n        sourceTech: 'js',\n        destTech: 'bemhtml'\n    }]\n]);\n```\n\n-------------------------------------------------------------------------------\n\n### `files`\n\nСобирает список исходных файлов и директорий для сборки на основе декларации БЭМ-сущностей, а также результате сканирования уровней `levels` технологией.\n\nПредоставляет `?.files` и `?.dirs` таргеты.\n\nИспользуется большинством технологиями в ENB (кроме базовых).\n\n#### Опции\n\n##### filesTarget\n\nТип: `String`. По умолчанию: `?.files`.\n\nРезультирующий `files`-таргет.\n\n##### dirsTarget\n\nТип: `String`. По умолчанию: `?.dirs`.\n\nРезультирующий `dirs`-таргет.\n\n##### depsFile\n\nТип: `String`. По умолчанию: `?.deps.js`.\n\nИсходная декларация БЭМ-сущностей.\n\n##### levelsTarget\n\nТип: `String`. По умолчанию: `?.levels`.\n\nТаргет с интроспекцией уровней (результат сканирования `levels` технологией).\n\n#### Пример\n\nФормирование списка файлов и директорий по BEMDECL-файлу.\n\n```js\nvar techs = require('enb-bem-techs'),\n    provide = require('enb/techs/file-provider');\n\nnodeConfig.addTechs([\n    [techs.levels, { levels: ['blocks'] }],\n    [provide, { target: '?.bemdecl.js' }]\n    [techs.files, { depsFile: '?.bemdecl.js' }]\n]);\n```\n\nФормирование списка файлов и директорий по DEPS-файлу.\n\n```js\nvar techs = require('enb-bem-techs'),\n    provide = require('enb/techs/file-provider');\n\nnodeConfig.addTechs([\n    [techs.levels, { levels: ['blocks'] }],\n    [provide, { target: '?.bemdecl.js' }],\n    [techs.deps],\n    [techs.files]\n]);\n```\n\n-------------------------------------------------------------------------------\n\n### `provideBemdecl`\n\nКопирует BEMDECL-файл в текущую ноду по указанному имени из указанной ноды.\n\nМожет понадобиться для объединения BEMDECL-файлов из разных нод.\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.bemdecl.js` (демаскируется в рамках текущей ноды).\n\nРезультирующий BEMDECL-файл.\n\n##### node\n\nТип: `String`. Обязательная опция.\n\nПуть ноды с исходным BEMDECL-файлом.\n\n##### source\n\nТип: `String`. По умолчанию: `?.bemdecl.js` (демаскируется в рамках исходной ноды).\n\nИсходный BEMDECL-файл, который будет скопирован.\n\n#### Пример\n\n```js\nvar techs = require('enb-bem-techs');\n\n/**\n * Ноды в файловой системе до сборки:\n *\n * bundles/\n * ├── bundle-1/\n *     └── bundle-1.bemdecl.js\n * ├── bundle-2/\n *     └── bundle-1.bemdecl.js\n * └── bundle-3/\n *\n * Что должно получиться после сборки:\n *\n * bundles/\n * ├── bundle-1/\n *     └── bundle-1.bemdecl.js\n * ├── bundle-2/\n *     └── bundle-2.bemdecl.js\n * └── bundle-3/\n *     ├── bundle-1.bemdecl.js\n *     └── bundle-2.bemdecl.js\n */\nconfig.node('bundle-3', function (nodeConfig) {\n    nodeConfig.addTechs([\n        // Копируем BEMDECL-файл из ноды `bundle-1` в `bundle-3`\n        [techs.provideBemdecl, {\n            node: 'bundles/bundle-1',\n            target: 'bundle-1.bemdecl.js'\n        }],\n\n        // Копируем BEMDECL-файл из ноды `bundle-2` в `bundle-3`\n        [techs.provideBemdecl, {\n            node: 'bundles/bundle-2',\n            target: 'bundle-2.bemdecl.js'\n        }]\n    ]);\n});\n```\n\n-------------------------------------------------------------------------------\n\n### `provideDeps`\n\nКопирует DEPS-файл в текущую ноду по указанному имени из указанной ноды.\n\nМожет понадобиться для объединения DEPS-таргетов из разных нод.\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.deps.js` (демаскируется в рамках текущей ноды).\n\nРезультирующий DEPS-файл.\n\n##### node\n\nТип: `String`. Обязательная опция.\n\nПуть ноды с исходным DEPS-файлом.\n\n##### source\n\nТип: `String`. По умолчанию: `?.deps.js` (демаскируется в рамках исходной ноды).\n\nИсходный DEPS-файл, который будет скопирован из указанной ноды.\n\n#### Пример\n\n```js\nvar techs = require('enb-bem-techs');\n\n/**\n * Ноды в файловой системе до сборки:\n *\n * bundles/\n * ├── bundle-1/\n *     └── bundle-1.deps.js\n * ├── bundle-2/\n *     └── bundle-1.deps.js\n * └── bundle-3/\n *\n * Что должно получиться после сборки:\n *\n * bundles/\n * ├── bundle-1/\n *     └── bundle-1.deps.js\n * ├── bundle-2/\n *     └── bundle-2.deps.js\n * └── bundle-3/\n *     ├── bundle-1.deps.js\n *     └── bundle-2.deps.js\n */\nconfig.node('bundle-3', function (nodeConfig) {\n    nodeConfig.addTechs([\n        // Копируем DEPS-файл из ноды `bundle-1` в `bundle-3`\n        [techs.provideBemdecl, {\n            node: 'bundles/bundle-1',\n            target: 'bundle-1.deps.js'\n        }],\n\n        // Копируем DEPS-файл из ноды `bundle-2` в `bundle-3`\n        [techs.provideBemdecl, {\n            node: 'bundles/bundle-2',\n            target: 'bundle-2.deps.js'\n        }]\n    ]);\n});\n```\n\n-------------------------------------------------------------------------------\n\n### `mergeBemdecl`\n\nОбъединяет BEMDECL-файлы в результирующий.\n\nМожет понадобиться для формирования `merged`-бандла.\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.bemdecl.js`.\n\nРезультирующий BEMDECL-файл.\n\n##### sources\n\nТип: `String[]`. Обязательная опция.\n\nИсходные BEMDECL-файлы.\n\n#### Пример\n\n```js\nvar techs = require('enb-bem-techs');\n\n/**\n * Ноды в файловой системе до сборки:\n *\n * merged-bundle/\n * ├── bundle-1.bemdecl.js\n * └── bundle-2.bemdecl.js\n *\n * Что должно получиться после сборки:\n *\n * merged-bundle/\n * ├── bundle-1.bemdecl.js\n * ├── bundle-2.bemdecl.js\n * └── merged-bundle.bemdecl.js\n */\nnodeConfig.addTech([techs.mergeBemdecl, {\n    sources: ['bundle-1.bemdecl.js', 'bundle-2.bemdecl.js'],\n    target: 'merged-bundle.bemdecl.js'\n}]);\n```\n\n-------------------------------------------------------------------------------\n\n### `mergeDeps`\n\nОбъединяет DEPS-файлы и BEMDECL-файлы в результирующий DEPS-файл.\n\nМожет понадобиться для формирования `merged`-бандла.\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.deps.js`.\n\nРезультирующий DEPS-файл.\n\n##### sources\n\nТип: `String[]`. Обязательная опция.\n\nИсходные DEPS-файлы. Обязательная опция.\n\n#### Пример\n\n```js\nvar techs = require('enb-bem-techs');\n\n/**\n * Ноды в файловой системе до сборки:\n *\n * merged-bundle/\n * ├── bundle-1.deps.js\n * └── bundle-2.deps.js\n *\n * Что должно получиться после сборки:\n *\n * merged-bundle/\n * ├── bundle-1.deps.js\n * ├── bundle-2.deps.js\n * └── merged-bundle.deps.js\n */\nnodeConfig.addTech([techs.mergeDeps, {\n    sources: ['bundle-1.deps.js', 'bundle-2.deps.js'],\n    target: 'merged-bundle.deps.js'\n}]);\n```\n\n-------------------------------------------------------------------------------\n\n### `subtractDeps`\n\nФормирует DEPS-файл, вычитая один DEPS-файл из другого.\n\n#### Опции\n\n##### target\n\nТип: `String`. По умолчанию: `?.deps.js`.\n\nРезультирующий DEPS-файл.\n\n##### from\n\nТип: `String`. Обязательная опция.\n\nDEPS-файл, из которого вычитают.\n\n##### what\n\nТип: `String`. Обязательная опция.\n\nDEPS-файл, который вычитают.\n\n#### Пример\n\n```js\nvar techs = require('enb-bem-techs');\n\nnodeConfig.addTech([techs.subtractDeps, {\n    from: 'bundle-1.deps.js',\n    what: 'bundle-2.deps.js',\n    target: 'bundle.deps.js'\n} ]);\n```\n\nЛицензия\n--------\n\n© 2014 YANDEX LLC. Код лицензирован [Mozilla Public License 2.0](LICENSE.txt).\n",
  "readmeFilename": "README.md",
  "_id": "enb-bem-techs@1.0.4",
  "_from": "enb-bem-techs@^1.0.3"
}
